on:
  push:
    branches:
    - master
    tags:
    - '*'
  schedule:
    - cron: '0 0 * * 4'
  workflow_dispatch:
    inputs:
        PHP_VCS_REF:
          default: master
          required: true
          description: https://github.com/php/php-src/commits/master master branch commit id

name: PHP_nightly

jobs:
  build:
    name: Build
    strategy:
      max-parallel: 1
      matrix:
        # TYPE: [CLI, FPM, UNIT, COMPOSER, SWOOLE, PPM, SUPERVISORD]
        TYPE: [CLI, FPM, COMPOSER, UNIT, SWOOLE]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        fetch-depth: 2
    - run: |
        set -x
        env
        docker --version
        docker-compose --version
      name: 'manifest'
    # - run: |
    #     set -x
    #     sudo rm /usr/local/bin/docker-compose
    #     curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
    #     sudo install -m755 docker-compose /usr/local/bin
    #   name: 'Setup Docker Compose'
    #   env:
    #     DOCKER_COMPOSE_VERSION: 1.27.0
    - uses: docker-practice/actions-setup-docker@master
    - run: |
        set -x
        docker --version
        docker-compose --version
        docker buildx version
        docker
      name: 'install-after-manifest'
    - run: |
        set -x
        echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
        # echo ${DOCKER_PASSWORD} | docker login -u ${TENCENT_DOCKER_USERNAME} --password-stdin uswccr.ccs.tencentyun.com
        echo ${DOCKER_PASSWORD} | docker login -u ${ALIYUN_DOCKER_USERNAME} --password-stdin registry.us-east-1.aliyuncs.com
        echo ${GHCR_IO_TOKEN} | docker login -u khs1994 --password-stdin ghcr.io
        echo ${CODING_DOCKER_PASSWORD} | docker login -u khs1994-1601432822176 --password-stdin pcit-docker.pkg.coding.net
      name: 'Docker Login'
      env:
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        TENCENT_DOCKER_USERNAME: ${{secrets.TENCENT_DOCKER_USERNAME}}
        ALIYUN_DOCKER_USERNAME: ${{secrets.ALIYUN_DOCKER_USERNAME}}
        CODING_DOCKER_PASSWORD: ${{secrets.CODING_DOCKER_PASSWORD}}
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        GHCR_IO_TOKEN: ${{secrets.GHCR_IO_TOKEN}}
    - run: |
        cp .env.example .env
        set -ex

        echo $GITHUB_REF | grep -q 'refs/tags/' && IS_TAG_EVENT=1 || true

        if ! [ -n "${IS_TAG_EVENT}" -o "${GITHUB_EVENT_NAME}" = 'workflow_dispatch' ];then \
          export PLATFORM=linux/amd64; \
          if [ "$PHP_VERSION" = 8_1_X -o "$PHP_VERSION" = nightly ];then \
            export PLATFORM=linux/amd64,linux/arm64,linux/arm/v7; \
            IS_PUSH=--push; \
            mirror="${add_mirror}"; \
          else \
            true; \
          fi; \
        else \
          IS_PUSH=--push \
          && mirror="${add_mirror}"; \
        fi

        VCS_REF=`git rev-parse --short HEAD`
        # CACHE_IMAGE=ghcr.io/khs1994/php
        CACHE_IMAGE=${DOCKER_HUB_USERNAME}/php

        if [ -z "${PHP_VCS_REF}" -o "${PHP_VCS_REF}" = 'master' ];then
          git clone --depth=1 https://github.com/php/php-src $HOME/php-src
          PHP_VCS_REF=`git -C $HOME/php-src rev-parse --short HEAD`
        fi

        options="--build-arg VCS_REF=$VCS_REF \
        --build-arg PHP_VCS_REF=$PHP_VCS_REF \
        --cache-from=khs1994/php:${FOLDER}-arm-${TYPE,,}-cache \
        --cache-from=${CACHE_IMAGE}:${FOLDER}-${TYPE,,}-cache \
        --cache-to=${CACHE_IMAGE}:${FOLDER}-${TYPE,,}-cache"
        echo $options

        if [ "$TYPE" = "UNIT" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-unit-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-unit-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/unit; \
        fi

        if [ "$TYPE" = "SUPERVISORD" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-supervisord-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-supervisord-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/supervisord; \
        fi

        if [ "$TYPE" = "COMPOSER" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-composer-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-composer-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/composer; \
        fi

        if [ "$TYPE" = "SINGLE" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-single-alpine \
          ${IS_PUSH} ${FOLDER}/single; \
        fi

        if [ "$TYPE" = "SWOOLE" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-swoole-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-swoole-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/swoole; \
        fi

        if [ "$TYPE" = "FPM" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          --target=php -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-fpm-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-fpm-alpine ";done) \
          ${fpmTagOptions} \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/alpine; \
        fi

        if [ "$TYPE" = "CLI" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-cli-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-cli-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/cli; \
        fi

        if [ "$TYPE" = "PPM" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-ppm-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-ppm-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/ppm; \
        fi
      env:
        GITHUB_EVENT_NAME: ${{github.event_name}}
        DOCKER_HUB_USERNAME: khs1994
        DOCKER_HUB_USERNAME_TEST: lrew
        PLATFORM: linux/amd64,linux/arm64,linux/arm/v7
        PHP_VERSION: nightly
        FOLDER: nightly
        PHP_TAG_VERSION: nightly
        TYPE: ${{ matrix.TYPE }}
        add_mirror: registry.us-east-1.aliyuncs.com/khs1994-us/php pcit-docker.pkg.coding.net/khs1994-docker/khs1994/php # ghcr.io/khs1994/php
        PHP_VCS_REF: ${{ github.event.inputs.PHP_VCS_REF }}
      name: 'Build Image'

    - run: |
        curl -X POST https://hooks.microbadger.com/images/$DOCKER_HUB_USERNAME/php/OMVCEKSr9I0cjhU0DQop3HwjYAc=
      name: 'Trigger hooks'
      env:
        DOCKER_HUB_USERNAME: khs1994
      if: success()
